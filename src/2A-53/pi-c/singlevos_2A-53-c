#! /usr/bin/perl
#-*-Perl-*-
#
# This is the user interface to the rain rate algorithm program '2A53c', 
# written by the TRMM Office to implement a Simple Simon algorithm.
# 
# This script does the following:
#   1. Takes 1C-51 product (UF file) and 2A-54 product 
#      (HDF file--contains 1 VOS), 
#   2. Calls the real algorithm program.  This step creates an
#      HDF file containing rain rate map
#
# Script returns 0 upon successful completion; non-zero, otherwise.
#
#
#
#
# By:    Thuy Nguyen
#        NASA/TRMM Office
#        Thuy.Nguyen@gsfc.nasa.gov
#        June 10, 1996
#
##############################################################################
$SIG{'INT'} = 'doexit_handler';
$SIG{'KILL'} = 'doexit_handler';
$SIG{'STOP'} = 'doexit_handler';
$SIG{'SEGV'} = 'doexit_handler';
$SIG{'ILL'} = 'doexit_handler';
$SIG{'FPE'} = 'doexit_handler';
@path = split(/\//, $0);
$product = $path[$#path];

$real_prog = "2A53c";
if ($#ARGV < 1) {
	do usage();
}

# set defaults
@options = "";
$uf_file = "";
$infile_hdf2A54 = "";
$outfile = "";

do process_argv(@ARGV);

# Convert csmap in hdf file to ascii file
$prog = "2A-54_hdf2ascii";
$csmap_ascii_file = "csmap.ascii.tmp";
$cmd = "$prog $infile_hdf2A54 $csmap_ascii_file";
if ($verbose == 1) {
	print STDERR "$product: Executing $prog ...\n";
}
system($cmd);

$status = $? >>8;		
local($sig) = $? & 255;
do doexit_handler($sig) if ($sig != 0);
						# 
if ($status != 0) {
	do doexit_handler('INT') if ($status == -2 || $status == 254);

	print STDERR "$product: ERROR: Failed executing $prog. Bye.\n";
	exit(-1);
}

# call the real program
$cmd = "$real_prog @options $uf_file $csmap_ascii_file $outfile";
if ($verbose) {
	print STDERR "$product: Executing...$cmd\n";
}
system($cmd);
$status = $? >> 8;
local($sig) = $? & 255;
do doexit_handler($sig) if ($sig != 0);
unlink ($csmap_ascii_file);


if ($status != 0) {
	do doexit_handler('INT') if ($status == -2 || $status == 254);
	print STDERR "$product: Failed creating rrmap $outfile \n";	# 
	exit(-1);
}

if ($verbose) {
	print STDERR "$product: Successful\n";
}

exit(0);


########################### Sub routines section #############################


sub usage {
  print STDERR "Usage: $product [-v] qc_uf_file csmap_shdf_file rrmap_shdf_file\n";

  exit(-1);
}


sub process_argv{
	local(@argv_list) = @_;

	@files_list = @argv_list[$#argv_list-2..$#argv_list]; # last 3 items.
	@options = @argv_list[0..$#argv_list-3]; # Every option up to ...

	$verbose = 0;
	for(@options) {
		$verbose = 1 if $_ eq "-v";
		last if $verbose;
	}

	# get in/out filenames
	($uf_file, $infile_hdf2A54, $outfile) = @files_list;
	
	if ($verbose) {
		print STDERR "$product: Which program: $0\n"; 
		print STDERR "$product: qc infile    = $uf_file\n";
		print STDERR "$product: csmap infile = $infile_hdf2A54\n";
		print STDERR "$product: outfile      = $outfile\n";
	}
}



sub cleanup {
	unlink ($csmap_ascii_file);
}

sub doexit_handler {
	# This routine was called when interrupt occurred.
	# Clean up and exit.
	local($signal) = @_;

	# Restore STDERR and STDOUT.  This is required since both stderr and stdout
    # were redirected in the calling program, all_tape_level_1n2.
	close(1);
	close(2);
	open(STDOUT, ">/dev/tty");
	open(STDERR, ">/dev/tty");
	$| = 1;
	do cleanup();
	print STDERR "$product: Interrupted. Got signal <$signal>. Abort execution. \n";
	kill $signal, 0;
	exit(-2) if ($signal == 'KILL' || $signal == 'STOP' || $signal == 'INT');
	exit(-1);
}















