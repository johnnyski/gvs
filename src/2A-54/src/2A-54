#! /usr/bin/perl
#-*-Perl-*-
#
#
# This script process 2A-54 product at granuled level. It does the following:
#   1. Degranulize the HDF file for 1C-51.
#   2. For each UF file resulted from step 1, call 'singlevos_2A-54' to produce 
#      csmap (HDF file).
#   3. Granulize the HDF file for 2A-54.
#   4. Returns -1 if failure occurred and couldn't continue.
#               0 Successful.
#               1 Failure occurred during processing for some VOS but could
#                 continue for other VOS.
#              -2 Program was aborted by SIGINT (^C).
#
# NOTES:
#   This script will create a tmp directory, tmp$$ to do work from and will
#   remove when exits.
#
#   Have access to the executable files located in $GVS/format_conversion,
#   in './src', and in '$GV_UTILS/'.
#
#   Requires: 
#
#     $GVS_DATA_PATH/gv_radar_site_info.data -- when the program creates 
#             an empty granule product.
#
#
# By:    Thuy Nguyen
#        NASA/TRMM Office
#        Thuy.Nguyen@gsfc.nasa.gov
#        June 11, 1995
#
#############################################################################
$PROG_VERSION = "gvs-v4.21";
unshift (@INC, ".", "/usr/local/trmm/GVBOX/bin");
do 'gv_utilities.pl';
$product = $this_prog;
$metadata_file_opt = "";
@save_option_list = ();
@option_list = ();
@csmap_shdf_file_list;  # file name of single VOS HDF files
$output_dir = "";       # Default, use pathname from out filename
$site = "";
do process_argv(@ARGV);

# Work in a tmp dir to allow parallel processing in the same dir.
$top_tmp_working_dir = "2A-54_$$/";
do do_system_call("mkdir -p $top_tmp_working_dir");
# Remember to go to the curr dir when exit.
print STDERR "$this_prog: Will work in dir: $top_tmp_working_dir\n" if ($verbose);
chdir($top_tmp_working_dir);

# create tmp dir to explode files
$tmpdir = "tmp$$";
system("mkdir $tmpdir");

# degranulize the HDF file for 1C-51
if ($verbose) {
	print STDERR "$product: degranulizing $qc_ghdf_file\n";
}
@uf_file_list = &degranulize_qc_hdf($qc_ghdf_file);


if ($verbose) {
	print STDERR "uf file list : \n@uf_file_list\n";
}

# If site name is not specified, try to get it from 1C-51 HDF file here at
# this level of processing. Passing site info down to the actual program 
# would improve performance since it eliminats the actual program from
# getting site name from the input file each time it is called.
if ($site eq "") {
	$site = &get_site_name_from_uf_file($qc_ghdf_file);
	# Add option to option list.
	push(@option_list, "-S");
	push(@option_list, $site);
}

$failure = 0;
# call progam to produce csmap for one VOS.
while (@uf_file_list) {
	$uf_file = shift @uf_file_list;
	chop($uf_file);  # remove newline */
 	($tmp_file = $uf_file) =~ s/.uf.*/.hdf/;
	$csmap_shdf_file = "$tmp_file.2A54";

	$options_str = join (' ', @option_list);
	$cmd = "singlevos_2A-54 $options_str $uf_file $csmap_shdf_file"; 
	if ($verbose) {
		print STDERR "$product: Executing...$cmd\n";
	}

	system($cmd);				# 
	$status = $? >> 8;			# 
	local($sig) = $? & 255;
	do doexit_handler($sig) if ($sig != 0);
	unlink ($uf_file);  # remove uf file 
	if ($status != 0) {
		do doexit_handler('INT') if ($status == -2 || $status == 254);

		print STDERR "$product: Failed executing ... $cmd\n";
		$failure++;
		next;
	}
	if ($verbose) {
		print STDERR "$product: Success producing $csmap_shdf_file\n";
	}
	push(@csmap_shdf_file_list, $csmap_shdf_file);
}

$rc = &create_product();


do cleanup();
if ($rc != 0) {
	print STDERR "$product: Failed producing granuled HDF file <$csmap_ghdf_file>\n";
	exit($SEVERE_ERROR_CODE);
}
if ($failure > 0) {
	$msg = "$product: Warning: Failure(s) has occurred when running $prog_exe for single VOS of $qc_ghdf_file.\n";
	$rc = 1;
}
else {
	$msg = "$product: Successful.\n";
	$rc = $SUCCESS_CODE;
}
if ($verbose) {
	print  STDERR $msg;
}
exit($rc);


############################## Subroutines Section #######################

sub usage {
	print STDERR "Usage ($PROG_VERSION):\n"; 
	print STDERR "   $product [-v] [-m metadata_file] [options_list] \n";
	print STDERR "\tqc_ghdf_file csmap_ghdf_file\n";
	print STDERR "   where:\n";
	print STDERR "\t-m:  Specify filename for metadata file.\n",
	"\t     Default:\"\$GVS_DATA_PATH/2A54_metadata.txt\"\n";

	print STDERR "\t[options_list] = options for 2A-54. \n";
	print STDERR "\tExecute 'singlevos_2A-54' to see a list of options.\n";

	exit ($SEVERE_ERROR_CODE);
}


sub process_argv{
	local(@argv_list) = @_;

	$option_end = 0;
	while (@argv_list && $option_end != 1) {
		$str = shift @argv_list;
		if ($str =~ /^\-/) {

			if ($str eq "-v") {
				$verbose = 1;
				$verbose_opt = "-v";
				push(@option_list, $str);
			} 
			elsif ($str eq "-D") {
				# Not push to option list
				$output_dir = shift @argv_list;
				do usage() if ($output_dir =~ /^-/);
			}
			elsif ($str eq "-S") {
				$site = shift @argv_list;
				push(@option_list, $str);
				push(@option_list, $site);
			}
			elsif ($str eq "-m") {
				push(@option_list, $str);
				$str = shift @argv_list;
				$metadata_file_opt = "-m $str";
				push(@option_list, $str);
			}
			else {

				push(@option_list, $str);
				# Push option's value
				$str = shift @argv_list;
				push(@option_list, $str);
			}
		}
		else {
			$option_end = 1;
		}
	}
	if ($#argv_list != 0) {
		do usage();
	}
	@save_option_list = @option_list;
	if ($output_dir ne "") {
		push(@save_option_list, "-D");
		push(@save_option_list, $output_dir);
	}
	else {
		$output_dir = "$curr_dir/";
	}
	$qc_ghdf_file = &change2absolute_filename($curr_dir, $str);

	$csmap_ghdf_file = &change2absolute_filename($output_dir, shift @argv_list);
		
}

sub degranulize_qc_hdf {
	# splits and converts granuled hdf file to UF file(s) for 1C-51 
	# Returns a list of UF files
	local($ghdf_file) = @_;
	local($cmd) = "level_1_ghdf_to_singlevos_uf $verbose_opt -u $tmpdir $ghdf_file|";
	if ($verbose) {
		print STDERR "$product: Executing ... $cmd\n";
	}
	open(UF_FILES, $cmd) || die "Couldn't run $cmd: $!\n";
	@uf_files = <UF_FILES>;
	close(UF_FILES);
	return @uf_files;
}

sub cleanup {
	# remove uf csmap single VOS hdf file(s)

	if ($#csmap_shdf_file_list > 0) {
		if ($verbose) {
			print STDERR "$product: Removing single VOS CSMAP files:  @csmap_shdf_file_list\n";
		}
		unlink (@csmap_shdf_file_list);
	}
	chdir ($curr_dir) if ($curr_dir ne "" && -d $curr_dir);  # Go back to the original dir.
	do do_system_call("rm -r $top_tmp_working_dir") if (-d $top_tmp_working_dir);
}



sub doexit_handler {
	# This routine was called when interrupt occurred.
	# Clean up and exit.
	local($signal) = @_;

	# Restore STDERR and STDOUT.  This is required since both stderr and stdout
    # were redirected in the calling program, all_tape_level_1n2.
	close(1);
	close(2);
	open(STDOUT, ">/dev/tty");
	open(STDERR, ">/dev/tty");
	$| = 1;
    do cleanup();
	print STDERR "$product: Got signal <$signal>. Abort execution. Time =".time."\n";
	kill $signal, 0;

	exit($INTER_CODE) if ($signal == 'KILL' || $signal == 'STOP' || $signal == 'INT');
	exit($SEVERE_ERROR_CODE);
}




sub change_to_2digits {
	local(*num) = @_;
	# Change num to tw0-digit number

	$num = "0".$num if ($num eq "1" || $num eq "2" || $num eq "3" || 
						$num eq "4" || $num eq "5" ||
						$num eq "6" || $num eq "7" || $num eq "8" ||
						$num eq "9");
}

sub get_file_mod_date {
	local($fname) = @_;
	# Return last modified date for file

	local($dev, $ino, $mod, $nlink, $uid, $gid, $rdv, $size, $atime, $mtime, $ctime, $blksize, $blocks) = stat($fname);
	local($sec, $min, $hour, $mday, $mon, $yr, $wday, $yday, $isdst) = localtime($mtime);
	$yr += 1900;
	$mon ++;
	do change_to_2digits(*mon);
	do change_to_2digits(*mday);
	local($mdate) = "$yr/$mon/$mday";
	return $mdate;
}


sub create_product {
	# Granulize single vos products or create an empty granule product.
    # Return 0 for successful; -1, otherwise

	local($rc);
	
    # Place input files, their gen. date, and program's options to a tmp file.
    # file format: 
	#    line 1: input files separated by space
	#    line 2: input files' generated date separated by space
	#    line 3: program's runtime options.
	#
	local($param_info_fname) = "$tmpdir/param_info.dat";
	open(TMP_FILE, "> $tmpdir/param_info.dat") || return -1;
	local(@qc_path) = split(/\//, $qc_ghdf_file);
	print TMP_FILE "$qc_path[$#qc_path]\n";
	# Get infiles' modified dates.
	local($qc_file_mdate) = &get_file_mod_date($qc_ghdf_file);

	print TMP_FILE "$qc_file_mdate \n";
	print TMP_FILE "@save_option_list\n";
	close(TMP_FILE);

	if ($#csmap_shdf_file_list < 0) {
		# Create an empty granule product
		local($outfile) = $csmap_ghdf_file;
		$outfile = $output_dir."/".$csmap_ghdf_file 
			if ($output_dir ne "" && $csmap_ghdf_file !~ /.*\/.+/);
		local($cmd) = "level_2_create_empty_granule_hdf $verbose_opt $metadata_file_opt -p $param_info_fname 4 $qc_ghdf_file $outfile";
		$rc = & do_system_call($cmd);
	}
	else {
		# Granulize single vos file(s).
		local(@qc_path) = split(/\//, $qc_ghdf_file);
		$qc_path[$#qc_path] = "";    # remove fname 
		local($qc_dir) = join('/', @qc_path);
	$qc_dir = "." if ($qc_dir eq "");
		local($csmap_shdf_file_str) = join (' ', @csmap_shdf_file_list);
		local($out_dir_opt) = "";
		$out_dir_opt = "-o $output_dir" if ($output_dir ne "");
		local($cmd) = "level_2_singlevos_hdf_to_ghdf $verbose_opt $out_dir_opt -q $qc_dir -p $param_info_fname 4 $csmap_shdf_file_str $csmap_ghdf_file";
		if ($verbose) {
			print STDERR "$product: Executing...$cmd\n";
		}
		$rc = & do_system_call($cmd);
	}
	return $rc;
}

sub do_system_call {
	local($cmd) = @_;
	local($rc) = $SUCCESS_CODE;
	system($cmd);
	$status = $? >> 8;			# 
	local($sig) = $? & 255;
	do doexit_handler($sig) if ($sig != 0);
	do doexit_handler('INT') if ($status == -2 || $status == 254);

	if ($status != 0) {
		print STDERR "$product: Failed executing ... $cmd\n";
		$rc = $SEVERE_ERROR_CODE;
	}
	return $rc;
}
